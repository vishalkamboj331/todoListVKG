const express = require('express');
const MongoClient = require('mongodb').MongoClient;
const dotenv = require('dotenv')
const app = express();
const port = 5000;

dotenv.config();
const url =  process.env.MONGO_URI// Replace with your MongoDB Atlas connection string

app.get('/', async (req, res) => {
    const client = await MongoClient.connect(url);
    try {
        const adminDb = client.db('todoliatDB');
        const databases = await adminDb.admin().listDatabases();
        
        res.json(databases);
    } catch (error) {
        console.error('Error:', error);
        res.status(500).send('Internal Server Error');
    } finally {
      client.close();
  }
});

app.get('/db', async (req, res) => {
  try {
    const client = await MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true });
    const db = client.db('todolistDB'); // Replace with your database name
    const collections = await db.listCollections().toArray();

    res.json(collections);
  } catch (error) {
    console.error('Error:', error);
    res.status(500).send('Internal Server Error');
  } finally {
    client.close();
  }
});

app.get('/data', async (req, res) => {
    const client = await MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true });
    try {
      const db = client.db("todolistDB");
      
      const collection = db.collection('todos'); // Update with your collection name
  
      const data = await collection.find({}).toArray();
      res.json(data);
    } catch (error) {
      console.error('Error:', error);
      res.status(500).send('Internal Server Error');
    } finally {
      client.close(); // Close the connection after fetching data
    }
  });
  

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
